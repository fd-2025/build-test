name: Build OsmAnd

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Info
        run: |
          whoami
          id
          df -h
          ls -la /mnt
          lscpu
          free -h
          #curl -sS -H Metadata:true "http://169.254.169.254/metadata/versions"
          echo "Azure VM:"
          curl -sS -H Metadata:true "http://169.254.169.254/metadata/instance/compute/vmSize?api-version=2023-11-15&format=text"

      - name: free
        run: |
          df -h
          #sudo du -sh /usr/local/lib/android || true
          sudo rm -rf /usr/local/lib/android

          #sudo du -sh /usr/local/.ghcup || true
          sudo rm -rf /usr/local/.ghcup

          #sudo du -sh /opt/hostedtoolcache || true
          sudo rm -rf /opt/hostedtoolcache
          df -h
          sudo tune2fs -m 0 "$(findmnt -n -o SOURCE --target /mnt)"
          df -h

      - name: LVM
        run: |
          df -h
          VG_NAME=buildvg
          BUILD_MOUNT_PATH=/mnt/data_volume
          ROOT_PV_PATH=/pv.img
          MNT_PV_PATH=/mnt/pv.img
          ROOT_BYTES=21474836480
          MNT_RESERVED_MB=128
          ROOT_RESERVED_MB=24576

          sudo mkdir -p "${BUILD_MOUNT_PATH}"

          echo "Creating LVM Volume"
          echo "-- Creating LVM PV on root fs"
          # create loop PV image on root fs
          ROOT_RESERVED_KB=$(expr ${ROOT_RESERVED_MB} \* 1024)
          ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          ROOT_LVM_SIZE_KB=$(expr $ROOT_FREE_KB - $ROOT_RESERVED_KB)
          ROOT_LVM_SIZE_BYTES=$(expr $ROOT_LVM_SIZE_KB \* 1024)

          sudo touch "${ROOT_PV_PATH}" && sudo fallocate -z -l "${ROOT_LVM_SIZE_BYTES}" "${ROOT_PV_PATH}"
          export ROOT_LOOP_DEV=$(sudo losetup --find --show "${ROOT_PV_PATH}")
          sudo pvcreate -f "${ROOT_LOOP_DEV}"

          # create PV on mnt disk
          echo "-- Creating LVM PV on mnt fs"

          MNT_RESERVE_KB=$(expr ${MNT_RESERVED_MB} \* 1024)
          MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          MNT_LVM_SIZE_KB=$(expr $MNT_FREE_KB - $MNT_RESERVE_KB)
          MNT_LVM_SIZE_BYTES=$(expr $MNT_LVM_SIZE_KB \* 1024)

          sudo touch "${MNT_PV_PATH}" && sudo fallocate -z -l "${MNT_LVM_SIZE_BYTES}" "${MNT_PV_PATH}"
          export MNT_LOOP_DEV=$(sudo losetup --find --show "${MNT_PV_PATH}")
          sudo pvcreate -f "${MNT_LOOP_DEV}"

          # create volume group from these PVs
          sudo vgcreate "${VG_NAME}" "${MNT_LOOP_DEV}" "${ROOT_LOOP_DEV}"

          echo "Creating build volume"
          # create and mount build volume
          sudo lvcreate -l 100%FREE -n buildlv "${VG_NAME}"
          sudo mkfs.ext4 -Enodiscard -m0 "/dev/mapper/${VG_NAME}-buildlv"
          sudo mount "/dev/mapper/${VG_NAME}-buildlv" "${BUILD_MOUNT_PATH}"

          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          df -h
          docker build -t local/osmand:latest .
          df -h

      - name: Show total Docker image size
        run: docker images local/osmand:latest

      - name: Show Docker image layers and their sizes
        run: docker history --no-trunc --human local/osmand:latest

      - name: Create data directory
        run: |
          #mkdir ${{ github.workspace }}/data_volume
          #chmod 777 ${{ github.workspace }}/data_volume
          sudo mkdir -p /mnt/data_volume
          #sudo chmod 777 /mnt/data_volume
          sudo chown 1000:1000 /mnt/data_volume ###
          sudo ls -ld /mnt/data_volume
          id
          ###sudo setfacl -m u:1000:rwx,g:1000:rwx /mnt/data_volume
          ###sudo getfacl -p /mnt/data_volume
          ###sudo getfacl -n -p /mnt/data_volume

      - name: Run Docker
        run: |
          #docker run -d --name osmand_container -v "${{ github.workspace }}/data_volume:/mnt/volume" local/osmand:latest sleep infinity
          docker run -d --name osmand_container -v /mnt/data_volume:/mnt/volume local/osmand:latest sleep infinity

      - name: Test gradle docker
        run: |
          docker exec osmand_container ls -la /opt/gradle/bin/gradle
          #docker exec osmand_container ls -la /home/vagrant/fdroidserver
          docker exec osmand_container ls -la /home/vagrant/gradlew-fdroid/gradlew-fdroid

      - name: Run prebuild
        run: |
          docker exec -w /mnt/volume osmand_container sh -c '
          whoami
          id
          pwd
          ls -la
          ###sudo apt-get install acl
          ###getfacl -p /mnt/volume
          ###getfacl -n -p /mnt/volume
          java -version
          javac -version
          echo "PATH: $PATH"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_SDK: $ANDROID_SDK"
          echo "ANDROID_NDK: $ANDROID_NDK"
          echo "FDROIDSERVER: $FDROIDSERVER"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "PYTHONUNBUFFERED: $PYTHONUNBUFFERED"
          '
          docker exec -w /mnt/volume osmand_container setup-volume.sh
          docker exec -w /mnt/volume/OsmAnd-submodules osmand_container ./prebuild.sh "5.2.6" "5206" arm64
          #docker exec -w /mnt/volume/OsmAnd-submodules osmand_container ./prebuild.sh "5.2.6" "5206"

      - name: Run build
        #continue-on-error: true
        run: |
          df -h
          docker exec -w /mnt/volume/OsmAnd-submodules osmand_container ./build.sh arm64
          #docker exec -w /mnt/volume/OsmAnd-submodules osmand_container ./build.sh
          df -h
          #docker exec -w /mnt/volume/OsmAnd-submodules osmand_container du -sh core/externals/boost
          #docker exec -w /mnt/volume/OsmAnd-submodules osmand_container rm -rf core/externals/boost
          df -h

      - name: Run gradle
        #continue-on-error: true
        run: |
          docker exec -w /mnt/volume/OsmAnd-submodules/android/OsmAnd osmand_container gradle assembleAndroidFullOpenglArm64Release
          #docker exec -w /mnt/volume/OsmAnd-submodules/android/OsmAnd osmand_container gradle assembleAndroidFullOpenglFatRelease
          df -h

      - name: Run stop Docker
        continue-on-error: true
        run: |
          docker stop osmand_container

          echo "find APKs:"
          #find ${{ github.workspace }}/volume -type f -name 'OsmAnd*.apk'
          find /mnt/data_volume -type f -name 'OsmAnd*.apk'

          docker rm osmand_container
          df -h

      - name: Upload apk as artifact
        #continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: apk-file
          #path: ${{ github.workspace }}/volume/**/OsmAnd*.apk
          path: /mnt/data_volume/**/OsmAnd*.apk
